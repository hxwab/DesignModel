package com.singleton;

public class Singleton {
	private static ReentrantLock lock =  new ReentrantLock();
	private static Singleton instance=null;
	private static Object ojb = new Object();
	
	
	private Singleton() {
		// TODO Auto-generated constructor stub
	}
	
	//每次调用都上锁
	public static Singleton getInstance(){
		
		lock.lock();
		try{
			if(instance==null){
				instance = new Singleton();
			}
		}finally{
			lock.unlock();
		}
		return instance;
	}
	
	//每次调用都上锁
	public static Singleton getInstance(){
		synchronized (ojb) {
			if(instance==null){
				instance = new Singleton();
			}
		}
		return instance;
	}
	
	
	//上锁耗时，先判断们对于instance 为null的上锁
	public static Singleton getInstance1(){
		
		if(instance==null){
			
			synchronized (ojb) {
				if(instance==null){
					instance = new Singleton();
				}
			}
		}
		return instance;
	}
	

}


class Singleton2{
	
	private static Singleton2 instance =null;
	//静态块在该类加载的时候执行，且存储在单独开辟的空间
	static{
		instance = new Singleton2();
	}
	private Singleton2() {
		// TODO Auto-generated constructor stub
	}
	
	public static Singleton2 getInstance(){
		
		return instance;
	}
}
